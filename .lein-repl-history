exit
macroexpand defhandler
macroexpand-1 defhandler
exit
 (use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
exit
(server/start runnable-service)
(refresh)
 (use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(stencil.loader/set-cache (clojure.core.cache/ttl-cache-factory {} :ttl 0))
 (use '[clojure.tools.namespace.repl :only (refresh)])
(stencil.loader/set-cache (clojure.core.cache/ttl-cache-factory {} :ttl 0))
(refresh)
(cp-infra.message.db/all-messages)
(cp-infra.message.db/all-messages (d/db db/conn))
(cp-infra.message.db/all-messages (datomic.api/db db/conn))
(cp-infra.message.db/all-messages (datomic.api/db cp-infra.message.db/conn))
(cp-infra.message.db/create-message "title1" "desc1")
(cp-infra.message.db/all-messages (datomic.api/db cp-infra.message.db/conn))
(cp-infra.message.db/create-message "title2" "desc2")
(cp-infra.message.db/all-messages (datomic.api/db cp-infra.message.db/conn))
(stencil.loader/set-cache (clojure.core.cache/ttl-cache-factory {} :ttl 0))
 (use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
 (use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(cp-infra.message.db/create-message "title2" "desc2")
(cp-infra.message.db/all-messages (datomic.api/db cp-infra.message.db/conn))
(stencil.loader/set-cache (clojure.core.cache/ttl-cache-factory {} :ttl 0))
(refresh)
exit
(stencil.loader/set-cache (clojure.core.cache/ttl-cache-factory {} :ttl 0))
 (use '[clojure.tools.namespace.repl :only (refresh)])
(server/start runnable-service)
(server/stop runnable-service)
(refresh)
(server/start runnable-service)
(cp-infra.message.db/create-message "title2" "desc2")
(cp-infra.message.db/create-message "title1" "desc1")
(cp-infra.message.db/all-messages (datomic.api/db cp-infra.message.db/conn))
(refresh)
 (use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(stencil.loader/set-cache (clojure.core.cache/ttl-cache-factory {} :ttl 0))
(refresh)
 (use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(server/stop runnable-service)
(refresh)
(server/start runnable-service)
exit
(server/start runnable-service)
(stencil.loader/set-cache (clojure.core.cache/ttl-cache-factory {} :ttl 0))
(cp-infra.message.db/create-message "title1" "desc1")
(cp-infra.message.db/create-message "title2" "desc2")
 (use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(server/stop runnable-service)
(server/start runnable-service)
exit
(server/start runnable-service)
(server/stop runnable-service)
 (use '[clojure.tools.namespace.repl :only (refresh)])
(refresh)
(server/start runnable-service)
(stencil.loader/set-cache (clojure.core.cache/ttl-cache-factory {} :ttl 0))
